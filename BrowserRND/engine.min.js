Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector), Element.prototype.closest || (Element.prototype.closest = function (e) { for (var t = this; t;) { if (t.matches(e)) return t; t = t.parentElement } }); var engineHelper = function (e) { return { addStep: function (t) { try { e.external.PushRecordSteps(JSON.stringify(t)) } catch (e) { } }, addSteps: function (t) { try { e.external.PushAllRecordSteps(JSON.stringify(t)) } catch (e) { } }, play: function (t) { try { e.external.Play() } catch (e) { return [] } }, log: function (t) { console.log(t); try { e.external.log(t) } catch (e) { } }, showSelector: function (t) { console.log(t); try { e.external.ElementSelector(t) } catch (e) { } } } }(window), engine = function (e, t) { var n = [], o = function (e) { var o = d(e.target); n.push({ action: "click", selector: o }), t.addSteps(n) }, r = function (e) { e.preventDefault(); var o = d(e.target); n.push({ action: "submit", selector: o }), t.addSteps(n) }, l = function (e) { var o = d(e.target); "submit" === e.target.type && null != e.target.form && ("submit", o = d(e.target.form)), n.push({ action: "submit", selector: o }), t.addSteps(n) }, a = function (e) { t.log("_keyPressRecord" + e.target.tagName); var o = d(e.target); t.log("_keyPressRecord target " + o); for (var r = -1, l = 0; l < n.length; ++l)if ("input" == n[l].action && n[l].selector == o) { r = l; break } t.log("_keyPressRecord :: " + r), -1 == r ? n.push({ action: "input", selector: o, value: e.target.value }) : n[r].value = e.target.value, t.log("_keyPressRecord"), t.addSteps(n) }, c = function () { n = [], e.addEventListener("keydown", a), e.addEventListener("click", o), e.addEventListener("mousedown", l); var t = e.querySelectorAll("form"); for (let e = 0; e < t.length; e++) { t[e].addEventListener("submit", r) } }, i = function () { e.removeEventListener("click", o), e.removeEventListener("keydown", a), e.removeEventListener("mousedown", l); var n = e.querySelectorAll("form"); for (let e = 0; e < n.length; e++) { n[e].addEventListener("submit", r) } t.addSteps(s()), t.log("Recorded", s()) }, s = function () { return n }, u = function () { t.log("call play action"), t.play() }, d = function (e) { if ("HTML" == e.tagName | "Body") return e.tagName; var t = []; t.push(e.tagName), t = t.concat(p(e.attributes)); var n = f(t); return "string" == typeof n ? n : d(e.parentElement) + " " + n[0] }, p = function (e) { for (var t = [], n = 0; n < e.length; n++) { const o = e[n]; "id" != o.name ? "class" != o.name ? o.value ? t.push("[" + o.name + "='" + o.value + "']") : t.push("[" + o.name + "]") : t.push("." + o.value.split(" ").join(".")) : t.push("#" + o.value) } return t }, f = function (t) { for (let n = 0; n < t.length; n++) { const o = t[n]; if (1 == e.querySelectorAll(o).length) return o } var n = t.join(""); if (1 == e.querySelectorAll(n).length) return n; { const t = []; for (let o = 0; o < e.querySelectorAll(n).length; o++) { e.querySelectorAll(n).length[o]; t.push(n) } return t } }, g = function () { let t = e.createElement("div"), n = e.createElement("style"); t.innerHTML = "<div id='test-auto-too'>\n        <label>[CTRL + ALT + R] = Record</label>\n        <br/>\n        <label> [CTRL + ALT + S] = Stop </label>\n        <br/>\n        <label> [CTRL + ALT + P] = Play </label>\n    </div>", n.innerHTML = "#test-auto-too {display: block;position: fixed;opacity: 0.5;bottom: 20px;right: 20px;padding: 20px;} #test-auto-too:hover {opacity: 1;border: 1px solid blue;}", e.body && (e.body.appendChild(t), e.body.appendChild(n)) }; return e.addEventListener("mouseover", function (e) { var n = d(e.target); t.showSelector(n) }), window.addEventListener("load", function (t) { "complete" === e.readyState && g() }), e.addEventListener("keydown", function (e) { var n = window.event ? event : e; if (t.log("Keydown :: " + n.keyCode), n.ctrlKey && n.altKey) switch (n.keyCode) { case 82: c(); break; case 83: i(); break; case 80: u() } }), g(), { getHits: s, play: function (o) { t.log(o), (n = JSON.parse(o)).forEach(function (n) { switch (t.log(n.action + " :: " + n.selector), n.action) { case "submit": setTimeout(function () { e.querySelector(n.selector).submit() }, 0); break; case "click": setTimeout(function () { t.log(n.action + "2000 :: " + n.selector), window.document.querySelector(n.selector).click() }, 2e3); break; case "input": setTimeout(function () { e.querySelector(n.selector).value = n.value }, 0) } }) }, record: c, stop: i } }(window.document, engineHelper); function engine_play(e) { engineHelper.log(e), engine.play(e) }